import os
import random
import pygame

# De eigenschappen opsplitsen
class Set:
    colors = ('red', 'green', 'purple')
    symbols = ('oval', 'squiggle', 'diamond')
    shadings = ('filled', 'shaded', 'empty')

    def __init__(self, name):
        self.name = name
        self.features = self.parse_name_to_features(self.name)

    def parse_name_to_features(self, name):
        color = next(i for i, c in enumerate(self.colors) if c in name)
        symbol = next(i for i, s in enumerate(self.symbols) if s in name)
        shading = next(i for i, sh in enumerate(self.shadings) if sh in name)
        number = int(name[-1]) - 1
        return (color, symbol, shading, number)

    def __repr__(self):
        return str(self.features)

def is_set(card1,card2,card3):
        for x in range(4):
            totalvalue = card1[x] + card2[x] + card3[x]
            if totalvalue % 3 != 0:
                return False
        return True

def find_one_set(cards):
    cards_set = set(cards)
    def missing_card(c1, c2):
        return tuple((- (c1[x] + c2[x]) % 3) for x in range(4))
    for i in range(len(cards) - 2):
        for x in range(i + 1, len(cards) - 1):
            m = missing_card(cards[i], cards[x])
            if m in cards_set:
                return (cards[i], cards[x], m)

def find_all_sets(cards):
    cards_set = set(cards) 
    sets = set()
    def missing_card(c1, c2):
        return tuple((- (c1[x] + c2[x]) % 3) for x in range(4))
    for i in range(len(cards) - 2):
        for x in range(i + 1, len(cards) - 1):
            m = missing_card(cards[i], cards[x])
            if m in cards_set:
                SET = tuple(sorted((cards[i],cards[x],m)))
                sets.add(SET)
    return sets

def replace_cards(selected_cards, cards, remaining_cards, card_pad):
    for card in selected_cards:
        if remaining_cards:
            new_file_name = random.choice(remaining_cards)
            remaining_cards.remove(new_file_name)
            pad = os.path.join(card_pad, new_file_name)
            card["image"] = pygame.image.load(pad)
            card["selected"] = False
            card["is_valid_set"] = None
            card["vector"] = tuple(Set(new_file_name.replace(".gif", "")).features)
        else:
            cards.remove(card)


#begin van pygame
pygame.init()
screen = pygame.display.set_mode((1080, 720))
clock = pygame.time.Clock()
running = True

#definities zodat we de kaarten kunnen zien 
card_pad = "kaarten"
all_cards = [f for f in os.listdir(card_pad) if f.endswith(".gif")]
picked_cards = random.sample(all_cards, 12)
remaining_cards = [f for f in all_cards if f not in picked_cards]

cards = []
for i, filename in enumerate(picked_cards):
    pad = os.path.join(card_pad, filename)
    img = pygame.image.load(pad)
    x = 50 + (i % 4) * 150
    y = 50 + (i // 4) * 215
    rect = pygame.Rect(x, y, 100, 200)
    cards.append({
        "image": img,
        "rect": rect,
        "selected": False,
        "vector": tuple(Set(filename.replace(".gif", "")).features),
        "is_valid_set": None})

#definieer voor de loopjes en functies
set_timer = 0
false_set_timer = 0
found_set_cards = []
false_set_cards = []
player_score = 0
computer_score = 0


# Startscherm
def show_startscreen():
    selected_difficulty = None
    #text uitleg
    explanation = [
        "Welcome to SET!",
        "",
        "The rules:",
        "- On the screen, you'll see 12 cards.",
        "- Each card has 4 properties:",
        "  color, shape, shading and number.",
        "- A set consist of 3 cards whose properties are:",
        "  either the same, or different for all 4 properties.",
        "",
        "Click on 3 cards to check if they form a set.",
        "",
        "Good Luck!"]

    #loop
    while True:
        screen.fill((180, 211, 178))

    #technische shit om die text en kelur te kunnen doen
        title_font = pygame.font.SysFont(None, 60)
        explanation_font = pygame.font.SysFont(None, 30)

    # eigenschap van de startF
        start_button_rect = pygame.Rect(440, 590, 200, 60)
        start_button_color = (70, 200, 70)
        text_color = (255, 255, 255)

        for i, line in enumerate(explanation):
            text = explanation_font.render(line, True, (255, 255, 255))
            screen.blit(text, (100, 150 + i * 30))

    #eigenschappen moeilijkheidsknoppen
        dif_button_color_beg = (255, 255, 0)
        dif_button_rect_beg = pygame.Rect(730, 185, 300, 70)

        dif_button_color_int = (255, 165, 0)
        dif_button_rect_int = pygame.Rect(730, 285, 300, 70)

        dif_button_color_exp = (255, 0, 0)
        dif_button_rect_exp = pygame.Rect(730, 385, 300, 70)
    
    #knoppen moeilijkheids
        pygame.draw.rect(screen, dif_button_color_beg, dif_button_rect_beg, border_radius = 10)
        pygame.draw.rect(screen, dif_button_color_int, dif_button_rect_int, border_radius = 10)
        pygame.draw.rect(screen, dif_button_color_exp, dif_button_rect_exp, border_radius = 10)

    #kleur aanpassen van de geselecteerde (0,0,0) is nog zwart maar misschien andere kleur?
        if selected_difficulty == 40:
            dif_button_color_beg = start_button_color  
        pygame.draw.rect(screen, dif_button_color_beg, dif_button_rect_beg, border_radius = 10)
        if selected_difficulty == 30:
            dif_button_color_int = start_button_color
        pygame.draw.rect(screen, dif_button_color_int, dif_button_rect_int, border_radius = 10)
        if selected_difficulty == 20:
            dif_button_color_exp = start_button_color
        pygame.draw.rect(screen, dif_button_color_exp, dif_button_rect_exp, border_radius = 10)
            
    #het echte startscherm
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

            #het tikken van de knoppen
            if event.type == pygame.MOUSEBUTTONDOWN:
                if dif_button_rect_beg.collidepoint(event.pos):
                    selected_difficulty = 40
                if dif_button_rect_int.collidepoint(event.pos):
                    selected_difficulty = 30
                if dif_button_rect_exp.collidepoint(event.pos):
                    selected_difficulty = 20
                if start_button_rect.collidepoint(event.pos) and selected_difficulty is not None:
                    return selected_difficulty
       
       #start knop komt pas als je een moeilijkheidsknop hebt getikt
        if selected_difficulty is not None:
            pygame.draw.rect(screen, start_button_color, start_button_rect, border_radius=10)
            button_text = title_font.render("Start Set", True, text_color)
            screen.blit(button_text, (450, 600))    
            
        # Titel op scherm 
        title = title_font.render("SET - The Game", True, (255, 255, 255))
        screen.blit(title, (screen.get_width() // 2 - title.get_width() // 2, 40))
        
        # text moeilijkheidsgraads
        button_text_beg = title_font.render("Beginner", True, text_color)
        screen.blit(button_text_beg, (750,200))

        button_text_int = title_font.render("Intermediate", True, text_color)
        screen.blit(button_text_int, (750, 300))

        button_text_exp = title_font.render("Expert", True, text_color)
        screen.blit(button_text_exp, (750, 400))
              
        pygame.display.flip()
        pygame.time.Clock().tick(60)


#eindscherm
def show_endscreen(player_score, computer_score, selected_difficulty):
    button_play_again = pygame.Rect(400, 400, 280, 60)
    button_change_difficulty = pygame.Rect(400, 480, 280, 60)
    button_quit = pygame.Rect(400, 560, 280, 60)

    font_large = pygame.font.SysFont(None, 64)
    font_small = pygame.font.SysFont(None, 36)

    #wie er wint
    if player_score > computer_score:
        winner = "You win!" 
    elif player_score < computer_score:
        winner = "Computer wins!"
    else:
        winner = "Tie!"

    #als je het scherm hebt-loop
    while True:
        screen.fill((0, 30, 60))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if button_play_again.collidepoint(event.pos):
                    return selected_difficulty  #Start opnieuw met huidge tijd
                elif button_change_difficulty.collidepoint(event.pos):
                    COUNTDOWN_SECONDS = show_startscreen()
                    return COUNTDOWN_SECONDS
                elif button_quit.collidepoint(event.pos):
                    pygame.quit()
                    exit()


        #Titel & winnaar
        text_game_over = font_large.render("Game over!", True, (255, 255, 255))
        screen.blit(text_game_over, (screen.get_width() // 2 - text_game_over.get_width() // 2, 80))
        
        winner_text = font_small.render(winner, True, (255, 255, 255))
        screen.blit(winner_text, (screen.get_width() // 2 - winner_text.get_width() // 2, 160))

        score_text = font_small.render(f"Player: {player_score}    Computer: {computer_score}", True, (255, 255, 255))
        screen.blit(score_text, (screen.get_width() // 2 - score_text.get_width() // 2, 220))

        difficulties_dict = {40: "Difficulty: Beginner", 30: "Difficulty: Intermediate", 20: "Difficulty: Expert"}
        difficulty_text = font_small.render(difficulties_dict[selected_difficulty], True, (255, 255, 255))
        screen.blit(difficulty_text, (screen.get_width() // 2 - difficulty_text.get_width() // 2, 270))



        # Knoppen tekenen
        pygame.draw.rect(screen, (0, 180, 0), button_play_again, border_radius = 10)
        pygame.draw.rect(screen, (255, 165, 0), button_change_difficulty, border_radius = 10)
        pygame.draw.rect(screen, (180, 0, 0), button_quit, border_radius = 10)

        play_again_text = font_small.render("Play Again", True, (255, 255, 255))
        screen.blit(play_again_text, (button_play_again.centerx - play_again_text.get_width() // 2,
                                   button_play_again.centery - play_again_text.get_height() // 2))

        change_difficulty_text = font_small.render("Change Difficulty", True, (255, 255, 255))
        screen.blit(change_difficulty_text, (button_change_difficulty.centerx - change_difficulty_text.get_width() // 2,
                                  button_change_difficulty.centery - change_difficulty_text.get_height() // 2))

        quit_text = font_small.render("Quit", True, (255, 255, 255))
        screen.blit(quit_text, (button_quit.centerx - quit_text.get_width() // 2,
                                button_quit.centery - quit_text.get_height() // 2))

        pygame.display.flip()
        pygame.time.Clock().tick(60)

#van deze volgorgde klopt echt nog niks!!

#dit is voor het spel zelf
font = pygame.font.SysFont(None, 48)
COUNTDOWN_SECONDS = show_startscreen()
endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000

while running:
    #timer
    remaining_ms = endtime - pygame.time.get_ticks()
    if remaining_ms > 0:
        remaining_seconds = round(remaining_ms / 1000, None)
    else: remaining_ms = None

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        #kaarten tikken en zodra je 3 hebt geselecteerd functie aanroepen en score updaten maar wel nog zonder die highlight ronde 
        #erom heen en ook nog niet het plaatje
        elif event.type == pygame.MOUSEBUTTONDOWN:
            for card in cards:
                if card["rect"].collidepoint(event.pos):
                    card["selected"] = not card["selected"]

            selected_cards = [k for k in cards if k["selected"]]
            if len(selected_cards) == 3:
                vectors = [k["vector"] for k in selected_cards]
                is_valid = is_set(*vectors)
                for k in selected_cards:
                    k["is_valid_set"] = is_valid
                if is_valid:
                    set_by_player = True
                    player_score += 1
                    set_timer = pygame.time.get_ticks() + 500
                    found_set_cards = selected_cards.copy()
                    endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000
                else:
                    false_set_timer = pygame.time.get_ticks() + 500
                    false_set_cards = selected_cards.copy()
            else:
                for k in cards:
                    k["is_valid_set"] = None

    screen.fill((30, 100, 100))

    for card in cards:
        screen.blit(card["image"], card["rect"].topleft)
        if card["selected"]:
            if card["is_valid_set"] is True:
                color = (0, 255, 0)
                if set_by_player == True:
                    surface_correct = pygame.image.load(os.path.join("goeie set foto.jpg"))
                else: 
                    surface_correct = pygame.image.load(os.path.join("computer set goed.webp"))
                    surface_correct = pygame.transform.scale(surface_correct, (200, 355))
                screen.blit(surface_correct, (725, 300))
            elif card["is_valid_set"] is False:
                color = (255, 0, 0)
                surfacefout = pygame.image.load(os.path.join("foute set foto.jpg"))
                screen.blit(surfacefout, (725, 300))
            else:
                color = (255, 255, 0)
            pygame.draw.rect(screen, color, card["rect"], 4)

    if set_timer and pygame.time.get_ticks() >= set_timer:
        replace_cards(found_set_cards, cards, remaining_cards, card_pad)
        found_set_cards.clear()
        set_timer = 0

    if false_set_timer and pygame.time.get_ticks() >= false_set_timer:
        for card in false_set_cards:
            card["selected"] = False
            card["is_valid_set"] = None
        false_set_cards.clear()
        false_set_timer = 0

#als de tijd op is moet de computer kijken hoe die een set kan vinden met find_one_set en dan nieuwe kaarten 
    if remaining_ms == None:
        selected_cards = []
        current_vectors = [k["vector"] for k in cards if "vector" in k]
        found_set = find_one_set(current_vectors)
        show_missed_sets_start = pygame.time.get_ticks()
        show_missed_sets_end = show_missed_sets_start + 1300
        if found_set:
            set_by_player = False
            computer_score += 1
            if len(find_all_sets(current_vectors)) == 1:
                missed_sets = "You missed 1 SET!"
            else:
                missed_sets = f"You missed {len(find_all_sets(current_vectors))} SETS!"
            set_cards = [k for k in cards if k["vector"] in found_set]
            for card in cards:
                card["selected"] = card in set_cards
                card["is_valid_set"] = card in set_cards
            set_timer = pygame.time.get_ticks() + 1300
            found_set_cards = set_cards.copy()
        # geen mogelijke set optie
        else:
            cards_to_be_replaced = [cards[i] for i in [0, 4, 8] if i < len(cards)]
            missed_sets = "There were no SETS!"
            replace_cards(cards_to_be_replaced, cards, remaining_cards, card_pad)
        missed_sets_text = font.render(missed_sets, True, (255, 255, 255))  
        endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000

        # Spel is klaar als er geen sets meer zijn en geen remaining_cards
    current_vectors = [k["vector"] for k in cards]
    if not find_one_set(current_vectors) and not remaining_cards:
        COUNTDOWN_SECONDS = show_endscreen(player_score, computer_score, COUNTDOWN_SECONDS)
        picked_cards = random.sample(all_cards, 12)
        remaining_cards = [f for f in all_cards if f not in picked_cards]
        cards.clear()
        for i, filename in enumerate(picked_cards):
            pad = os.path.join(card_pad, filename)
            img = pygame.image.load(pad)
            x = 50 + (i % 4) * 150
            y = 50 + (i // 4) * 215
            rect = pygame.Rect(x, y, 100, 200)
            cards.append({
                "image": img,
                "rect": rect,
                "selected": False,
                "vector": tuple(Set(filename.replace(".gif", "")).features),
                "is_valid_set": None})
        player_score = 0
        computer_score = 0
        endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000

#text aan de zijkant, rechts
    pygame.draw.line(screen, (255, 255, 255), (660, 0), (660, 720), 15)
    timer_text = font.render(f"Time left: {remaining_seconds}s", True, (255, 255, 255))
    screen.blit(timer_text, (675, 20))
    score_text = font.render(f"You: {player_score}  |  Computer: {computer_score}", True, (255, 255, 255))
    screen.blit(score_text, (675, 70))
    pot_text = font.render(f"Cards left: {len(remaining_cards)}", True, (255, 255, 255))
    screen.blit(pot_text, (675, 120))
    if 'show_missed_sets_end' in locals() and pygame.time.get_ticks() < show_missed_sets_end:
        screen.blit(missed_sets_text, (675, 200))


    pygame.display.flip()
    clock.tick(60)

pygame.quit()
