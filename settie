import os
import random
import pygame

#De eigenschappen opsplitsen
class Set:
    colors = ['red', 'green', 'purple']
    symbols = ['oval', 'squiggle', 'diamond']
    shadings = ['filled', 'shaded', 'empty']
    numbers = ['1', '2', '3']

    def __init__(self, name):
        self.name = name.lower()
        self.features = self.parse_name_to_features(self.name)

    def parse_name_to_features(self, name):
        #Vind color
        color = next(i for i, c in enumerate(self.colors) if c in name)
        #Vind symbol
        symbol = next(i for i, s in enumerate(self.symbols) if s in name)
        #Vind shading
        shading = next(i for i, sh in enumerate(self.shadings) if sh in name)
        #Vind number
        number_char = name[-1]
        number = int(number_char) - 1
        return [color, symbol, shading, number]

    def __repr__(self):
        return str(self.features)  
    #Hij geeft hier niet de goeie vectoren aan, soms wel, soms niet

#even wat definities
kaart_pad = "kaarten"
alle_gif_kaarten = [f for f in os.listdir(kaart_pad) if f.endswith(".gif")]
bestandsnaam = alle_gif_kaarten[0]
setkaart = Set(bestandsnaam.replace(".gif", ""))

#Functie definiëren voor wanneer het wel een set is per value van die klasse dus voor 4 keer
def is_set(card1,card2,card3): 
        for x in range(4):
            totalvalue = int(card1[x] + card2[x] + card3[x])
            if totalvalue % 3 != 0:
                return False
        return True


def find_one_set(cards): #input: tuple met tuples
    cards_set = set(cards) #sneller
    def missing_card(c1, c2): #zoekt de kaart die met c1 en c2 een set vormt
        return tuple((- (c1[x] + c2[x]) % 3) for x in range(4))
    for i in range(len(cards)):
        for x in range(i + 1, len(cards)):
            m = missing_card(cards[i], cards[x])
            if m in cards_set:
                return (cards[i], cards[x], m)
    return None

def find_all_sets(cards): #input: tuple met tuples
    cards_set = set(cards) #sneller
    sets = set()
    def missing_card(c1, c2): #zoekt de kaart die met c1 en c2 een set vormt
        return tuple((- (c1[x] + c2[x]) % 3) for x in range(4))
    for i in range(len(cards)):
        for x in range(i + 1, len(cards)):
            m = missing_card(cards[i], cards[x])
            if m in cards_set:
                s_e_t = tuple(sorted((cards[i],cards[x],m))) #om duplicates te voorkomen
                sets.add(s_e_t) 
    if sets:
        return list(sets)
    return None


pygame.init()
screen = pygame.display.set_mode((1080, 720))
clock = pygame.time.Clock()
running = True

# 1. Lees alle .gif bestanden in de map
kaart_pad = "kaarten"
alle_gif_kaarten = [f for f in os.listdir(kaart_pad) if f.endswith(".gif")]
bestandsnaam = alle_gif_kaarten[0]
# 2. Kies willekeurig 12 kaarten
gekozen_kaarten = random.sample(alle_gif_kaarten, 12)
overgebleven_kaarten = [f for f in alle_gif_kaarten if f not in gekozen_kaarten]
setkaart = Set(bestandsnaam.replace(".gif", ""))
# 3. Laad kaarten met posities en selectie-status
kaarten = []
for i, bestandsnaam in enumerate(gekozen_kaarten):
    pad = os.path.join(kaart_pad, bestandsnaam)
    afbeelding = pygame.image.load(pad)
    
    x = 50 + (i % 4) * 150
    y = 50 + (i // 4) * 215
    rect = pygame.Rect(x, y, 100, 200)
    kaarten.append({
        "image": afbeelding,
        "rect": rect,
        "selected": False,
        "vector": tuple(Set(bestandsnaam.replace(".gif", "")).features),
        "is_valid_set": None 
    })

set_timer = 0
ongeldige_set_timer = 0
set_gevonden_kaarten = []
ongeldige_set_kaarten = []

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        
        elif event.type == pygame.MOUSEBUTTONDOWN:
            for kaart in kaarten:
                if kaart["rect"].collidepoint(event.pos):
                    kaart["selected"] = not kaart["selected"]

            geselecteerd = [k for k in kaarten if k["selected"]]
            if len(geselecteerd) == 3:
                vectors = [k["vector"] for k in geselecteerd]
                is_geldig = is_set(*vectors)
                for k in geselecteerd:
                    k["is_valid_set"] = is_geldig
                    if is_geldig:
                        set_timer = pygame.time.get_ticks() + 2000
                        set_gevonden_kaarten = geselecteerd.copy()
                    else: 
                        ongeldige_set_timer = pygame.time.get_ticks() + 2000
                        ongeldige_set_kaarten = geselecteerd.copy()
            else:
                for k in kaarten:
                    k["is_valid_set"] = None
                    

    screen.fill((30, 100, 100))

    for kaart in kaarten:
        screen.blit(kaart["image"], kaart["rect"].topleft)
        if kaart["selected"]:
            if kaart["is_valid_set"] is True:
                kleur = (0, 255, 0)  
            elif kaart["is_valid_set"] is False:
                kleur = (255, 0, 0) 
            else:
                kleur = (255, 255, 0)  
            pygame.draw.rect(screen, kleur, kaart["rect"], 4)

    # Check of we een geldige set moeten vervangen
    if set_timer and pygame.time.get_ticks() >= set_timer:
        geselecteerd = [k for k in kaarten if k["selected"] and k["is_valid_set"]]
        
        for kaart in geselecteerd:
            if overgebleven_kaarten:
                nieuwe_bestandsnaam = overgebleven_kaarten.pop()
                pad = os.path.join(kaart_pad, nieuwe_bestandsnaam)
                kaart["image"] = pygame.image.load(pad)
                kaart["selected"] = False
                kaart["is_valid_set"] = None
                kaart["vector"] = tuple(Set(nieuwe_bestandsnaam.replace(".gif", "")).features)
            else:
                # Geen nieuwe kaarten meer → verwijder kaart
                kaarten.remove(kaart)

        set_timer = 0  # Reset timer

    if ongeldige_set_timer and pygame.time.get_ticks() >= ongeldige_set_timer:
        for kaart in ongeldige_set_kaarten:
            kaart["selected"] = False
            kaart["is_valid_set"] = None

        ongeldige_set_kaarten.clear()
        ongeldige_set_timer = 0

    pygame.draw.line(screen, (255, 255, 255), (660, 0), (660, 720), 15)

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
