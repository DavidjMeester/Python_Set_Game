import os
import random
import pygame

# De eigenschappen opsplitsen
class Set:
    colors = ['red', 'green', 'purple']
    symbols = ['oval', 'squiggle', 'diamond']
    shadings = ['filled', 'shaded', 'empty']
    numbers = ['1', '2', '3']

    def __init__(self, name):
        self.name = name.lower()
        self.features = self.parse_name_to_features(self.name)

    def parse_name_to_features(self, name):
        color = next(i for i, c in enumerate(self.colors) if c in name)
        symbol = next(i for i, s in enumerate(self.symbols) if s in name)
        shading = next(i for i, sh in enumerate(self.shadings) if sh in name)
        number_char = name[-1]
        number = int(number_char) - 1
        return [color, symbol, shading, number]

    def __repr__(self):
        return str(self.features)

def is_set(card1, card2, card3):
    for x in range(4):
        totalvalue = int(card1[x] + card2[x] + card3[x])
        if totalvalue % 3 != 0:
            return False
    return True

def find_one_set(cards):
    cards_set = set(cards)
    def missing_card(c1, c2):
        return tuple((- (c1[x] + c2[x]) % 3) for x in range(4))
    for i in range(len(cards)):
        for x in range(i + 1, len(cards)):
            m = missing_card(cards[i], cards[x])
            if m in cards_set:
                return (cards[i], cards[x], m)
    return None

def vervang_kaarten(geselecteerde_kaarten, kaarten, overgebleven_kaarten, kaart_pad):
    for kaart in geselecteerde_kaarten:
        if overgebleven_kaarten:
            nieuwe_bestandsnaam = random.choice(overgebleven_kaarten)
            overgebleven_kaarten.remove(nieuwe_bestandsnaam)
            pad = os.path.join(kaart_pad, nieuwe_bestandsnaam)
            kaart["image"] = pygame.image.load(pad)
            kaart["selected"] = False
            kaart["is_valid_set"] = None
            kaart["vector"] = tuple(Set(nieuwe_bestandsnaam.replace(".gif", "")).features)
        else:
            kaarten.remove(kaart)

pygame.init()
screen = pygame.display.set_mode((1080, 720))
clock = pygame.time.Clock()
running = True


kaart_pad = "kaarten"
alle_gif_kaarten = [f for f in os.listdir(kaart_pad) if f.endswith(".gif")]
gekozen_kaarten = random.sample(alle_gif_kaarten, 12)
overgebleven_kaarten = [f for f in alle_gif_kaarten if f not in gekozen_kaarten]

kaarten = []
for i, bestandsnaam in enumerate(gekozen_kaarten):
    pad = os.path.join(kaart_pad, bestandsnaam)
    afbeelding = pygame.image.load(pad)
    x = 50 + (i % 4) * 150
    y = 50 + (i // 4) * 215
    rect = pygame.Rect(x, y, 100, 200)
    kaarten.append({
        "image": afbeelding,
        "rect": rect,
        "selected": False,
        "vector": tuple(Set(bestandsnaam.replace(".gif", "")).features),
        "is_valid_set": None
    })

set_timer = 0
ongeldige_set_timer = 0
set_gevonden_kaarten = []
ongeldige_set_kaarten = []
speler_score = 0
computer_score = 0

def toon_startscherm():
    uitleg = [
        "Welcome to SET!",
        "",
        "The rules:",
        "- on the screen, you'll see 12 cards.",
        "- Each card has 4 properties:",
        "  color, shape, shading and numbers.",
        "- A set consist of 3 cards where all properties are:",
        "  either the same, or different for all 4 properties.",
        "",
        "Click on 3 cards to check if its a set.",
        "",
       
    ]

    knop_rect = pygame.Rect(440, 600, 200, 60)
    knop_kleur = (70, 200, 70)
    tekst_kleur = (255, 255, 255)
    
    while True:
        screen.fill((20, 50, 80))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if knop_rect.collidepoint(event.pos):
                    return  # Start het spel
                    COUNTDOWN_SECONDS = 30
        # Tekst tekenen
        title_font = pygame.font.SysFont(None, 60)
        uitleg_font = pygame.font.SysFont(None, 30)
        
        titel = title_font.render("SET - The Game", True, (255, 255, 255))
        screen.blit(titel, (screen.get_width() // 2 - titel.get_width() // 2, 40))
        
        for i, regel in enumerate(uitleg):
            tekst = uitleg_font.render(regel, True, (255, 255, 255))
            screen.blit(tekst, (100, 150 + i * 30))

        # Knop tekenen
        pygame.draw.rect(screen, knop_kleur, knop_rect, border_radius=10)
        knop_tekst = title_font.render("Start Set", True, tekst_kleur)
        screen.blit(knop_tekst, (knop_rect.centerx - knop_tekst.get_width() // 2,
                                 knop_rect.centery - knop_tekst.get_height() // 2))

        pygame.display.flip()
        pygame.time.Clock().tick(60)

def toon_eindscherm(speler_score, computer_score, huidige_tijd_per_beurt):
    knop_opnieuw = pygame.Rect(400, 450, 280, 60)
    knop_minder_tijd = pygame.Rect(400, 530, 130, 50)
    knop_meer_tijd = pygame.Rect(550, 530, 130, 50)

    font_groot = pygame.font.SysFont(None, 64)
    font_klein = pygame.font.SysFont(None, 36)

    winnaar = "Speler wins!" if speler_score > computer_score else (
              "Tie!" if speler_score == computer_score else "Computer wins!")

    while True:
        screen.fill((0, 30, 60))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if knop_opnieuw.collidepoint(event.pos):
                    return huidige_tijd_per_beurt  # Start opnieuw met huidige tijd
                elif knop_meer_tijd.collidepoint(event.pos):
                    huidige_tijd_per_beurt += 5
                elif knop_minder_tijd.collidepoint(event.pos) and huidige_tijd_per_beurt > 5:
                    huidige_tijd_per_beurt -= 5

        # Titel & winnaar
        text_winnaar = font_groot.render("Game over!", True, (255, 255, 255))
        screen.blit(text_winnaar, (screen.get_width() // 2 - text_winnaar.get_width() // 2, 80))

        uitslag = font_klein.render(winnaar, True, (255, 255, 255))
        screen.blit(uitslag, (screen.get_width() // 2 - uitslag.get_width() // 2, 160))

        score_text = font_klein.render(f"Player: {speler_score}    Computer: {computer_score}", True, (255, 255, 255))
        screen.blit(score_text, (screen.get_width() // 2 - score_text.get_width() // 2, 220))

        tijd_text = font_klein.render(f"Time per turn: {huidige_tijd_per_beurt} seconds", True, (255, 255, 255))
        screen.blit(tijd_text, (screen.get_width() // 2 - tijd_text.get_width() // 2, 270))

        # Knoppen tekenen
        pygame.draw.rect(screen, (0, 180, 0), knop_opnieuw, border_radius=10)
        pygame.draw.rect(screen, (180, 0, 0), knop_minder_tijd, border_radius=10)
        pygame.draw.rect(screen, (0, 0, 180), knop_meer_tijd, border_radius=10)

        opnieuw_text = font_klein.render("Play again", True, (255, 255, 255))
        screen.blit(opnieuw_text, (knop_opnieuw.centerx - opnieuw_text.get_width() // 2,
                                   knop_opnieuw.centery - opnieuw_text.get_height() // 2))

        minder_text = font_klein.render("-5 sec", True, (255, 255, 255))
        screen.blit(minder_text, (knop_minder_tijd.centerx - minder_text.get_width() // 2,
                                  knop_minder_tijd.centery - minder_text.get_height() // 2))

        meer_text = font_klein.render("+5 sec", True, (255, 255, 255))
        screen.blit(meer_text, (knop_meer_tijd.centerx - meer_text.get_width() // 2,
                                knop_meer_tijd.centery - meer_text.get_height() // 2))

        pygame.display.flip()
        pygame.time.Clock().tick(60)


toon_startscherm()

font = pygame.font.SysFont(None, 48)
COUNTDOWN_SECONDS = 30
endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000

while running:

#startscherm
#  

    remaining_ms = endtime - pygame.time.get_ticks()
    remaining_seconds = max(0, remaining_ms // 1000)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.MOUSEBUTTONDOWN:
            for kaart in kaarten:
                if kaart["rect"].collidepoint(event.pos):
                    kaart["selected"] = not kaart["selected"]

            geselecteerd = [k for k in kaarten if k["selected"]]
            if len(geselecteerd) == 3:
                vectors = [k["vector"] for k in geselecteerd]
                is_geldig = is_set(*vectors)
                for k in geselecteerd:
                    k["is_valid_set"] = is_geldig
                if is_geldig:
                    speler_score += 1
                    set_timer = pygame.time.get_ticks() + 500
                    set_gevonden_kaarten = geselecteerd.copy()
                    endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000
                else:
                    ongeldige_set_timer = pygame.time.get_ticks() + 500
                    ongeldige_set_kaarten = geselecteerd.copy()
            else:
                for k in kaarten:
                    k["is_valid_set"] = None

    screen.fill((30, 100, 100))

    for kaart in kaarten:
        screen.blit(kaart["image"], kaart["rect"].topleft)
        if kaart["selected"]:
            if kaart["is_valid_set"] is True:
                kleur = (0, 255, 0)
            elif kaart["is_valid_set"] is False:
                kleur = (255, 0, 0)
            else:
                kleur = (255, 255, 0)
            pygame.draw.rect(screen, kleur, kaart["rect"], 4)

    if set_timer and pygame.time.get_ticks() >= set_timer:
        vervang_kaarten(set_gevonden_kaarten, kaarten, overgebleven_kaarten, kaart_pad)
        set_gevonden_kaarten.clear()
        set_timer = 0

    if ongeldige_set_timer and pygame.time.get_ticks() >= ongeldige_set_timer:
        for kaart in ongeldige_set_kaarten:
            kaart["selected"] = False
            kaart["is_valid_set"] = None
        ongeldige_set_kaarten.clear()
        ongeldige_set_timer = 0

    if remaining_seconds == 0:
        huidige_vectors = [k["vector"] for k in kaarten if "vector" in k]
        gevonden_set = find_one_set(huidige_vectors)
        if gevonden_set:
            computer_score += 1
            set_kaarten = [k for k in kaarten if k["vector"] in gevonden_set]
            for kaart in kaarten:
                kaart["selected"] = kaart in set_kaarten
                kaart["is_valid_set"] = kaart in set_kaarten
            set_timer = pygame.time.get_ticks() + 1250
            set_gevonden_kaarten = set_kaarten.copy()
        else:
            te_vervangen_kaarten = [kaarten[i] for i in [0, 4, 8] if i < len(kaarten)]
            vervang_kaarten(te_vervangen_kaarten, kaarten, overgebleven_kaarten, kaart_pad)
        endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000

#we moeten een eindscherm toevoegen

        # Spel eindigt als: geen sets meer op bord en geen kaarten meer over
    huidige_vectors = [k["vector"] for k in kaarten]
    if not find_one_set(huidige_vectors) and not overgebleven_kaarten:
        COUNTDOWN_SECONDS = toon_eindscherm(speler_score, computer_score, COUNTDOWN_SECONDS)
        
        # Reset spelstatus
        # Je kunt hier evt. een aparte functie maken voor resetten
        gekozen_kaarten = random.sample(alle_gif_kaarten, 12)
        overgebleven_kaarten = [f for f in alle_gif_kaarten if f not in gekozen_kaarten]
        kaarten.clear()
        for i, bestandsnaam in enumerate(gekozen_kaarten):
            pad = os.path.join(kaart_pad, bestandsnaam)
            afbeelding = pygame.image.load(pad)
            x = 50 + (i % 4) * 150
            y = 50 + (i // 4) * 215
            rect = pygame.Rect(x, y, 100, 200)
            kaarten.append({
                "image": afbeelding,
                "rect": rect,
                "selected": False,
                "vector": tuple(Set(bestandsnaam.replace(".gif", "")).features),
                "is_valid_set": None
            })
        speler_score = 0
        computer_score = 0
        endtime = pygame.time.get_ticks() + COUNTDOWN_SECONDS * 1000



    pygame.draw.line(screen, (255, 255, 255), (660, 0), (660, 720), 15)
    timer_text = font.render(f"Time left: {remaining_seconds}s", True, (255, 255, 255))
    screen.blit(timer_text, (675, 20))
    score_text = font.render(f"Jij: {speler_score}  |  Computer: {computer_score}", True, (255, 255, 255))
    screen.blit(score_text, (675, 70))


    pygame.display.flip()
    clock.tick(60)

pygame.quit()
